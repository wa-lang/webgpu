
import "js"

//type PipelineLayout struct {
//    _extref: js.ExtObj
//}

type PipelineDesc_vertex struct {
    Module: ShaderModule
    EntryPoint: string
    Layouts: []VertexLayout
}

type PipelineDesc_fragment struct {
    Module: ShaderModule
    EntryPoint: string
    Targets: []FragmentTarget
}

type PipelineDesc_primitive struct {
    
}

/*
不能使用该类型直接声明值，需通过 NewPipelineDesc_depthStencil() 创建
*/
type PipelineDesc_depthStencil struct {
    js.ExtObj    
}

func NewPipelineDesc_depthStencil() => PipelineDesc_depthStencil {
    ds: PipelineDesc_depthStencil
    ds.ExtObj = js.NewExtObj()
    return ds
}

func PipelineDesc_depthStencil.SetDepthBias(v: f32) {
    this.SetMember_f32("depthBias", v)
}

func PipelineDesc_depthStencil.SetDepthBiasClamp(v: f32) {
    this.SetMember_f32("depthBiasClamp", v)
}

func PipelineDesc_depthStencil.SetDepthBiasSlopeScale(v: f32) {
    this.SetMember_f32("depthBiasSlopeScale", v)
}

const (
    DepthCompare_never          = "never"
    DepthCompare_less           = "less"
    DepthCompare_equal          = "equal"
    DepthCompare_less_equal     = "less-equal"
    DepthCompare_greater        = "greater"
    DepthCompare_not_equal      = "not-equal"
    DepthCompare_greater_equal  = "greater-equal"
    DepthCompare_always         = "always"
)
func PipelineDesc_depthStencil.SetDepthCompare(v: string) {
    this.SetMember_string("depthCompare", v)
}

func PipelineDesc_depthStencil.SetDepthWriteEnabled(v: bool) {
    this.SetMember_bool("depthWriteEnabled", v)
}

func PipelineDesc_depthStencil.SetFormat(v: TextureFormat) {
    this.SetMember_string("format", textureFormatSymbols[v])
}

/*
不能使用该类型直接声明值，需通过 NewPipelineDesc() 创建
*/
type PipelineDesc struct {
    js.ExtObj
}

func NewPipeLineDesc() => PipelineDesc {
    pld: PipelineDesc

    pld.ExtObj = js.NewExtObj()
    pld.SetMember_string("layout", "auto")

    return pld
}

func PipelineDesc.SetVertex(v: PipelineDesc_vertex) {
    vo := js.NewExtObj()
    vo.SetMember_obj("module", v.Module._extref)
    vo.SetMember_string("entryPoint", v.EntryPoint)

    va := js.NewExtArray()
    for _, l := range v.Layouts {
        va.Append_obj(l.ExtObj)
    }
    vo.SetMember_obj("buffers", va.ExtObj)

    this.SetMember_obj("vertex", vo)
}

func PipelineDesc.SetFragment(f: PipelineDesc_fragment) {
    vo := js.NewExtObj()
    vo.SetMember_obj("module", f.Module._extref)
    vo.SetMember_string("entryPoint", f.EntryPoint)

    va := js.NewExtArray()
    for _, t := range f.Targets {
        va.Append_obj(t.ExtObj)
    }
    vo.SetMember_obj("targets", va.ExtObj)

    this.SetMember_obj("fragment", vo)
}

func PipelineDesc.SetDepthStencil(d: PipelineDesc_depthStencil) {
    this.SetMember_obj("depthStencil", d.ExtObj)
}

/*
不能使用该类型直接声明值，需通过 Device.CreateRenderPipeline 创建
*/
type RenderPipeline struct {
    js.ExtObj
}

#wa:import webgpu get_bind_group_layout
func jsGetBindGroupLayout(pipeline: js.Handle, id: int) => js.Handle
func RenderPipeline.GetBindGroupLayout(id: int) => BindGroupLayout {
    bl: BindGroupLayout
    bl.ExtObj = js.WrapExtObj(jsGetBindGroupLayout(this.GetHandle(), id))
    return bl
}