
import "js"

#wa:import webgpu get_gpu_contex
func jsGetGpuContex(canvas: js.Handle) => js.Handle

#wa:import webgpu configure_contex
func jsConfigureContex(contex, config: js.Handle)

#wa:import webgpu get_contex_current_texture
func jsGetContexCurrentTexture(contex: js.Handle) => js.Handle

#wa:import webgpu create_device
func jsCreateDevice() => js.Handle

#wa:import webgpu create_shader_module
func jsCreateShaderModule(device: js.Handle, code: string) => js.Handle

#wa:import webgpu create_buffer
func jsCreateBuffer(device: js.Handle, byteLen: int, usage: BufferUsage) => js.Handle

#wa:import webgpu create_texture
func jsCreateTexture(device: js.Handle, desc: js.Handle) => js.Handle

#wa:import webgpu create_render_pipeline
func jsCreateRenderPipeline(device, pl_desc: js.Handle) => js.Handle

#wa:import webgpu create_bind_group
func jsCreateBindGroup(device, bg_desc: js.Handle) => js.Handle

#wa:import webgpu get_bind_group_layout
func jsGetBindGroupLayout(pipeline: js.Handle, id: int) => js.Handle

#wa:import webgpu create_command_encoder
func jsCreateCommandEncoder(device: js.Handle) => js.Handle

#wa:import webgpu submit
func jsSubmit(device, gpu_command_buffer: js.Handle)

#wa:import webgpu finish_command_encoder
func jsFinishCommandEncoder(command_encoder: js.Handle) => js.Handle

#wa:import webgpu write_buffer
func jsWriteBuffer(device, buffer: js.Handle, offset: i32, data: []byte)

#wa:import webgpu create_texture_view
func jsCreateTextureView(texture: js.Handle) => js.Handle


#wa:import webgpu get_preferred_canvas_format
func jsGetPreferredCanvasFormat() => TextureFormat