
import "math"

type Vec3 struct {
    X, Y, Z: f32
}

func T() {

}

func Magnitude(v: Vec3) => f32 {
    return f32(math.Sqrt(f64(v.X * v.X + v.Y * v.Y + v.Z * v.Z)))
}

func Scale(v: Vec3, s: f32) => Vec3 {
    return Vec3{X: v.X * s, Y: v.Y * s, Z: v.Z * s}
}

func Sub(a, b: Vec3) => Vec3 {
    return Vec3{X: a.X - b.X, Y: a.Y - b.Y, Z: a.Z - b.Z}
}

func Normalize(v: Vec3) => Vec3 {
    m := 1.0 / Magnitude(v)
    return Scale(v, m)
}

func CrossProduct(a, b: Vec3) => Vec3 {
    r: Vec3
    r.X = a.Y * b.Z - a.Z * b.Y
    r.Y = a.Z * b.X - a.X * b.Z
    r.Z = a.X * b.Y - a.Y * b.X
    return r
}

func DotProduct(a, b: Vec3) => f32 {
    return a.X * b.X + a.Y * b.Y + a.Z * b.Z
}