
import "js"

//type PipelineLayout struct {
//    _extref: js.ExtObj
//}

type PipelineDesc_vertex struct {
    Module: ShaderModule
    EntryPoint: string
    Layouts: []VertexLayout
}

type PipelineDesc_fragment struct {
    Module: ShaderModule
    EntryPoint: string
    Targets: []FragmentTarget
}

/*
不能使用该类型直接声明值，需通过 NewPipelineDesc() 创建
*/
type PipelineDesc struct {
    js.ExtObj
}

func NewPipeLineDesc() => PipelineDesc {
    pld: PipelineDesc

    pld.ExtObj = js.NewExtObj()
    pld.SetMember_string("layout", "auto")

    return pld
}

func PipelineDesc.SetVertex(v: PipelineDesc_vertex) {
    vo := js.NewExtObj()
    vo.SetMember_obj("module", v.Module._extref)
    vo.SetMember_string("entryPoint", v.EntryPoint)

    va := js.NewExtArray()
    for _, l := range v.Layouts {
        va.Append_obj(l.ExtObj)
    }
    vo.SetMember_obj("buffers", va.ExtObj)

    this.SetMember_obj("vertex", vo)
}

func PipelineDesc.SetFragment(f: PipelineDesc_fragment) {
    vo := js.NewExtObj()
    vo.SetMember_obj("module", f.Module._extref)
    vo.SetMember_string("entryPoint", f.EntryPoint)

    va := js.NewExtArray()
    for _, t := range f.Targets {
        va.Append_obj(t.ExtObj)
    }
    vo.SetMember_obj("targets", va.ExtObj)

    this.SetMember_obj("fragment", vo)
}

/*
不能使用该类型直接声明值，需通过 Device.CreateRenderPipeline 创建
*/
type RenderPipeline struct {
    js.ExtObj
}
