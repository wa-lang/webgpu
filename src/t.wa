// 版权 @2023 凹语言 作者。保留所有权利。

import "gpu"
import "math/vector"
import "math/matrix"
import "math"
import "math/rand"
import "js"
import "net"

const (
	CanvasWidth = 512
	CanvasHeight = 512
	uniformBufferSize = 4 * 16
)

type MyHandler struct {
	i: i32
}

func MyHandler.handle(resource: string, ok: bool, status: u32, data: []byte) {
	println(this.i)
	println("h.handle(), data:", string(data))
}

func MyHandler.OnDone(resource: string, ok: bool, status: u32, data: []byte) {
	println("h.OnDone(), data:", string(data))
}
func _Finalizer1(p: u32) {
    println("_Finalizer1(), 释放 Block:", p)
}

func _Finalizer2(p: u32) {
    println("_Finalizer2(), 释放 Block:", p)
}

global P: *u32

func FFF() {
	P = nil
}

func main {
	h1: MyHandler
	h1.i = 13
	setFinalizer(&h1, _Finalizer1)
	net.FetchBlob("a.txt", h1.handle)
	net.FetchBlob("a.txt", &h1)

	v: u32
	setFinalizer(&v, _Finalizer2)
	net.FetchBlob("a.txt", func (resource: string, ok: bool, status: u32, data: []byte) {
		v = status
		println("h1, url:", resource, ", ok:", ok , ", status:", status, ", data:", string(data))
	})
	P = &v

	//println("你好，GPU")
}

const shaderCode = `
struct Uniforms {
  viewProjectionMatrix : mat4x4f
}
@group(0) @binding(0) var<uniform> uniforms : Uniforms;

@group(1) @binding(0) var<uniform> modelMatrix : mat4x4f;

struct VertexInput {
  @location(0) position : vec4f,
  @location(1) normal : vec3f,
  @location(2) uv : vec2f
}

struct VertexOutput {
  @builtin(position) position : vec4f,
  @location(0) normal: vec3f,
  @location(1) uv : vec2f,
}

@vertex
fn vertexMain(input: VertexInput) -> VertexOutput {
  var output : VertexOutput;
  output.position = uniforms.viewProjectionMatrix * modelMatrix * input.position;
  output.normal = normalize((modelMatrix * vec4(input.normal, 0)).xyz);
  output.uv = input.uv;
  return output;
}

@group(1) @binding(1) var meshSampler: sampler;
@group(1) @binding(2) var meshTexture: texture_2d<f32>;

// Static directional lighting
const lightDir = vec3f(1, 1, 1);
const dirColor = vec3(1);
const ambientColor = vec3f(0.05);

@fragment
fn fragmentMain(input: VertexOutput) -> @location(0) vec4f {
  let textureColor = textureSample(meshTexture, meshSampler, input.uv);
  //let textureColor = vec4f(1, 0.5, 0.5, 1);

  // Very simplified lighting algorithm.
  let lightColor = saturate(ambientColor + max(dot(input.normal, lightDir), 0.0) * dirColor);

  return vec4f(textureColor.rgb * lightColor, textureColor.a);
}
`

global (
	deviceCreated = false
	device: *gpu.Device

	resourceInitialized = false
	shader: gpu.ShaderModule
	contex: gpu.Contex
	renderPipeline: gpu.RenderPipeline
	depthTexture: *gpu.Texture

	uniformBuffer: *gpu.Buffer
	frameBindGroup: gpu.BindGroup

	texPlanet, texMoon: *gpu.Texture
	sampler: *gpu.Sampler

	rbs: []Renderable

	renderBundle: gpu.RenderBundle

	mRotation: f32
)

func StepFrame() {
	if !tryInitDevice() {
		println("Device not ready.")
		return
	}

	tryInitResource()

	draw()
}

func tryInitDevice() => bool {
	if deviceCreated {
		return device != nil
	}

	println("Request adapter...")
	gpu.RequestAdapter(func(adapter: *gpu.Adapter) {
		println("Request device...")
		adapter.RequestDevice(func(d: *gpu.Device){
			println("Request device ready.")
			device = d
		})
	})

	deviceCreated = true
	rand.Seed(73543197)
	return false
}

func tryInitResource() {
	if resourceInitialized {
		return
	}
	resourceInitialized = true
	println("Init resource...")

	contex = gpu.QueryContex("#gpuCanvas")
	{
		cc := gpu.ContexConfig{Device: device, Format: gpu.GetPreferredCanvasFormat(), AlphaMode: gpu.AlphaMode_premultiplied}
		contex.Configure(cc)
	}

	shader = device.CreateShaderModule(shaderCode)

	// pipeline:
	{
		pipelineDesc := gpu.NewPipeLineDesc()
		vertexAttributes := [...]gpu.VertexAttribute{
			gpu.VertexAttribute{Location: 0, Offset: posOffset, Format: gpu.VertexFormat_float32x3},  // pos
			gpu.VertexAttribute{Location: 1, Offset: norOffset, Format: gpu.VertexFormat_float32x3},  // nor
			gpu.VertexAttribute{Location: 2, Offset: uvOffset, Format: gpu.VertexFormat_float32x2},  // uv
		}
		vertexLayout := gpu.NewVertexLayout(sphereVertexStride, gpu.BufferStepMode_vertex, vertexAttributes[:])
		pldVertex := gpu.PipelineDesc_vertex{Module: shader, EntryPoint: "vertexMain"}
		pldVertex.Layouts = append(pldVertex.Layouts, vertexLayout)

		fragTarget := gpu.NewFragmentTarget(gpu.GetPreferredCanvasFormat())
		pldFragment := gpu.PipelineDesc_fragment{Module: shader, EntryPoint: "fragmentMain"}
		pldFragment.Targets = append(pldFragment.Targets, fragTarget)

		depthStencil := gpu.NewPipelineDesc_depthStencil()
		depthStencil.SetDepthWriteEnabled(true)
		depthStencil.SetDepthCompare(gpu.DepthCompare_less)
		depthStencil.SetFormat(gpu.TextureFormat_depth24plus)

		pipelineDesc.SetVertex(pldVertex)
		pipelineDesc.SetFragment(pldFragment)
		pipelineDesc.SetDepthStencil(depthStencil)
		renderPipeline = device.CreateRenderPipeline(pipelineDesc)
	}

	{
		d := gpu.DefaultTextureDesc()
		d.Format = gpu.TextureFormat_depth24plus
		d.Width = CanvasWidth
		d.Height = CanvasHeight
		d.Usage = gpu.TextureUsage_RENDER_ATTACHMENT
		d.Label = "Z-Buf"

		depthTexture = device.CreateTexture(d)
	}


	bufdesc := gpu.BufferDesc{
		Size: uniformBufferSize,
		Usage: gpu.BufferUsage_UNIFORM | gpu.BufferUsage_COPY_DST,
	}
	uniformBuffer = device.CreateBuffer(bufdesc)
	{
		entries : []gpu.BindGroupEntry

		e0 := gpu.NewBindGroupEntry()
		e0.SetBinding(0)
		e0.SetResource(gpu.NewBufferBinding(uniformBuffer).ExtObj)
		entries = append(entries, e0)

		bg_desc := gpu.NewBindGroupDesc()
		bg_desc.SetLayout(renderPipeline.GetBindGroupLayout(0))
		bg_desc.SetEntries(entries)

		frameBindGroup = device.CreateBindGroup(bg_desc)
	}

	// Texture
	{
		texDesc := gpu.DefaultTextureDesc()
		texDesc.Format = gpu.TextureFormat_rgba8unorm
		texDesc.Width = 2048
		texDesc.Height = 1024
		texDesc.Usage = gpu.TextureUsage_TEXTURE_BINDING | gpu.TextureUsage_COPY_DST | gpu.TextureUsage_RENDER_ATTACHMENT
		texDesc.Label = "Plannet"
		texPlanet = device.CreateTexture(texDesc)

		texDesc.Width = 512
		texDesc.Height = 256
		texDesc.Label = "Astroid"
		texMoon = device.CreateTexture(texDesc)

		net.FetchImage("./saturn.jpg", func(resource: string, ok: bool, status: u32, extobj: js.Handle) {
			device.CopyExternalImageToTexture(js.WrapExtObj(extobj), texPlanet)
			println(texPlanet.Label(), texPlanet.Dimension())
		})

		net.FetchImage("./moon.jpg", func(resource: string, ok: bool, status: u32, extobj: js.Handle) {
			device.CopyExternalImageToTexture(js.WrapExtObj(extobj), texMoon)
		})
	}

	{
		sd := gpu.DefaultSamplerDesc()
		sd.MagFilter = gpu.Filter_linear
		sd.MinFilter = gpu.Filter_linear
		sampler = device.CreateSampler(sd)
	}

	planet := createSphereRenderable(device, 1.0, 32, 16, 0)
	mat: matrix.Mat4f
	mat.Identity()
	planet.bg = createBindGroup(device, renderPipeline, mat, texPlanet)
	rbs = append(rbs, planet)

	asteroids := [...]Renderable{
		createSphereRenderable(device, 0.01, 8, 6, 0.15),
		createSphereRenderable(device, 0.013, 8, 6, 0.15),
		createSphereRenderable(device, 0.017, 8, 6, 0.15),
		createSphereRenderable(device, 0.02, 8, 6, 0.15),
		createSphereRenderable(device, 0.03, 16, 8, 0.15),
	}

	for i := 0; i < 1000; i++ {
		radius := rand.Float32() * 2.0 + 1.25
		angle := rand.Float32() * math.Pi * 2
		x := f32(math.Sin(f64(angle))) * radius
		y := (rand.Float32() - 0.5) * 0.05
		z := f32(math.Cos(f64(angle))) * radius

		r0 := matrix.NewRotateAxis(vector.Vec3f{1, 0, 0}, rand.Float32() * math.Pi)
		r1 := matrix.NewRotateAxis(vector.Vec3f{0, 1, 0}, rand.Float32() * math.Pi)
		t := matrix.NewTranslate(vector.Vec3f{x, y, z})

		rb := asteroids[i % len(asteroids)]
		rb.bg = createBindGroup(device, renderPipeline, matrix.Mul(matrix.Mul(r0, r1), t), texMoon)

		rbs = append(rbs, rb)
	}

	rbe_desc := gpu.NewRenderBundleEncoderDesc()
	rbe_desc.SetColorFormats([]gpu.TextureFormat{gpu.GetPreferredCanvasFormat()})
	rbe_desc.SetDepthStencilFormat(gpu.TextureFormat_depth24plus)
	renderBundleEncoder := device.CreateRenderBundleEncoder(rbe_desc)
	renderScene(renderBundleEncoder)
	renderBundle = renderBundleEncoder.Finish()
}

func draw() {
	matMVP := matrix.NewRotateAxis(vector.Vec3f{0, 1, 0}, mRotation)
	mRotation += 0.001
	rT := matrix.NewRotateAxis(vector.Vec3f{1, 0, 1}, 0.1 * math.Pi)
	matMVP = matrix.Mul(matMVP, rT)

	matView := matrix.NewCameraTransform(vector.Vec3f{0, 0, 4}, vector.Vec3f{0, 0, 0}, vector.Vec3f{0, 1, 0})
	matMVP = matrix.Mul(matMVP, matView)

	matProj := matrix.NewPerspective(2 * math.Pi / 5, f32(CanvasWidth) / f32(CanvasHeight), 0.1, 10)
	matMVP = matrix.Mul(matMVP, matProj)
	uniformBuffer.Write(0, raw([][4][4]f32{matMVP.M}))
	
	colorAttachments := [...]gpu.RenderPassDesc_ColorAttchment{
		gpu.RenderPassDesc_ColorAttchment{
			ClearValue: gpu.Color{0, 0, 0, 1},
			LoadOp: gpu.LoadOp_clear,
			StoreOp: gpu.StoreOp_store,
		},
	}
	contexTexture := contex.GetCurrentTexture()
	colorAttachments[0].View = contexTexture.CreateView()

	depthStencilAttachment := gpu.RenderPassDesc_DepthStencilAttachment{
		ClearValue: 1.0,
		LoadOp: gpu.LoadOp_clear,
		StoreOp: gpu.StoreOp_store,
		View: depthTexture.CreateView(),
	}

	renderPassDesc := gpu.NewRenderPassDesc()
	renderPassDesc.SetColorAttachments(colorAttachments[:])
	renderPassDesc.SetDepthStencilAttachment(depthStencilAttachment)

	commandEncoder := device.CreateCommandEncoder()
	encoder := commandEncoder.BeginRenderPass(renderPassDesc)

	//renderScene(encoder)
	encoder.ExecuteBundles([]gpu.RenderBundle{renderBundle})

	encoder.End()
	device.Submit(commandEncoder.Finish())
}

func renderScene(encoder: gpu.PassEncoder) {
	encoder.SetPipeline(renderPipeline)
	encoder.SetBindGroup(0, frameBindGroup)

	for _, rb := range(rbs) {
		encoder.SetBindGroup(1, rb.bg)
		encoder.SetVertexBuffer(0, rb.vb)
		encoder.SetIndexBuffer(rb.ib, "uint16")
		encoder.DrawIndexed(rb.icount)
	}
}