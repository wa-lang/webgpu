// 版权 @2023 凹语言 作者。保留所有权利。

import "webgpu"

func main {
	println("你好，GPU")
}

const shaderCode = `
struct VertexOut {
  @builtin(position) position : vec4f,
  @location(0) color : vec4f
}

@vertex
fn vertex_main(@location(0) position: vec4f,
               @location(1) color: vec4f) -> VertexOut
{
  var output : VertexOut;
  output.position = position;
  output.color = color;
  return output;
}

@fragment
fn fragment_main(fragData: VertexOut) -> @location(0) vec4f
{
  return fragData.color;
}
`

type Vertex struct {
	x, y, z, w: f32
	r, g, b, a: f32
}

global vertices = [...]Vertex{
	Vertex{ 0.0,  0.6, 0, 1, 1, 0, 0, 1 },
	Vertex{-0.5, -0.6, 0, 1, 0, 1, 0, 1 },
 	Vertex{ 0.5, -0.6, 0, 1, 0, 0, 1, 1},
}

global (
	device: webgpu.Device
	shader: webgpu.ShaderModule
	contex: webgpu.Contex
	vertexBuffer: webgpu.Buffer
	renderPipeline: webgpu.RenderPipeline
)

func InitDevice() {
	device = webgpu.CreateDevice()
}

func InitResource() {
	shader = device.CreateShaderModule(shaderCode)

	contex = webgpu.QueryContex("#gpuCanvas")
	{
		cc := webgpu.ContexConfig{Device: device, Format: webgpu.GetPreferredCanvasFormat(), AlphaMode: webgpu.AlphaMode_premultiplied}
		contex.Configure(cc)
	}

	vertexBuffer = device.CreateBuffer(32 * 3, webgpu.BufferUsage_VERTEX | webgpu.BufferUsage_COPY_DST)
	//Todo:
	//vertexBuffer.Write(0, vertices[:])

	vertexAttributes := [...]webgpu.VertexAttribute{
		webgpu.VertexAttribute{Location: 0, Offset: 0, Format: webgpu.VertexFormat_float32x4},
		webgpu.VertexAttribute{Location: 1, Offset: 16, Format: webgpu.VertexFormat_float32x4},
	}
	vertexLayout := webgpu.NewVertexLayout(32, webgpu.BufferStepMode_vertex, vertexAttributes[:])
	pldVertex := webgpu.PipelineDesc_vertex{Module: shader, EntryPoint: "vertex_main"}
	pldVertex.Layouts = append(pldVertex.Layouts, vertexLayout)

	fragTarget := webgpu.NewFragmentTarget(webgpu.GetPreferredCanvasFormat())
	pldFragment := webgpu.PipelineDesc_fragment{Module: shader, EntryPoint: "fragment_main"}
	pldFragment.Targets = append(pldFragment.Targets, fragTarget)

	pipelineDesc := webgpu.NewPipeLineDesc()
	pipelineDesc.SetVertex(pldVertex)
	pipelineDesc.SetFragment(pldFragment)

	renderPipeline = device.CreateRenderPipeline(pipelineDesc)
}

func Draw() {
	colorAttachments := [...]webgpu.RenderPassDesc_ColorAttchment{
		webgpu.RenderPassDesc_ColorAttchment{
			ClearValue: webgpu.Color{0, 0.5, 1.0, 1.0},
			LoadOp: webgpu.LoadOp_clear,
			StoreOp: webgpu.StoreOp_store,
		},
	}
	contexTexture := contex.GetCurrentTexture()
	colorAttachments[0].View = contexTexture.CreateView()

	renderPassDesc := webgpu.NewRenderPassDesc()
	renderPassDesc.SetColorAttachments(colorAttachments[:])

	commandEncoder := device.CreateCommandEncoder()

	renderPass := commandEncoder.BeginRenderPass(renderPassDesc)
	renderPass.SetPipeline(renderPipeline)
	renderPass.SetVertexBuffer(0, vertexBuffer)
	renderPass.Draw(3)
	renderPass.End()

	device.Submit(commandEncoder.Finish())
}