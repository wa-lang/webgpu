// 版权 @2023 凹语言 作者。保留所有权利。

import "math/vector"
import "math/matrix"
import "math"
import "gpu"
import "math/rand"

const (
	sphereVertexStride = 8 * 4
	posOffset = 0
	norOffset = 3 * 4
	uvOffset = 6 * 4
)

type sphereVertex struct {
	pos: vector.Vec3f
	nor: vector.Vec3f
	u, v: f32
}

type sphereMesh struct {
	vertex: []sphereVertex
	index: []u16
}

func createSphere(radius: f32, w, h: int, radiu_random: f32) => *sphereMesh {
	mesh: sphereMesh
	mesh.vertex = make([]sphereVertex, (w + 1) * (h + 1))
	grid: [][]u16

	vertex: sphereVertex
	first_pos: vector.Vec3f
	vertex_count: u16

	for y := 0; y <= h; y++ {
		row_index := make([]u16, w + 1)
		v := f32(y) / f32(h)
		u_off: f32
		if y == 0 {
			u_off = 0.5 / f32(w)
		} else if y == h {
			u_off = -0.5 / f32(w)
		}

		for x := 0; x <= w; x++ {
			u := f32(x) / f32(w)

			if x == w {
				vertex.pos = first_pos
			} else if x == 0 || (y != 0 && y != h) {
				r := radius + (rand.Float32() - 0.5) * 2 * radiu_random * radius
				vertex.pos.X = -r * f32(math.Cos(f64(u) * math.Pi * 2) * math.Sin(f64(v) * math.Pi))
				vertex.pos.Y = r * f32(math.Cos(f64(v) * math.Pi))
				vertex.pos.Z = r * f32(math.Sin(f64(u) * math.Pi * 2) * math.Sin(f64(v) * math.Pi))

				if x == 0 {
					first_pos = vertex.pos
				}
			}

			vertex.nor = vector.Normalize(vertex.pos)
			vertex.u = u + u_off
			vertex.v = 1 - v
			row_index[x] = vertex_count
			mesh.vertex[vertex_count] = vertex

			vertex_count++
		}

		grid = append(grid, row_index)
	}

	for y := 0; y < h; y++ {
		for x := 0; x < w; x++ {
			a := grid[y][x + 1]
			b := grid[y][x]
			c := grid[y + 1][x]
			d := grid[y + 1][x + 1]

			if y != 0 {
				mesh.index = append(mesh.index, a)
				mesh.index = append(mesh.index, b)
				mesh.index = append(mesh.index, d)
			}
			if y != h - 1 {
				mesh.index = append(mesh.index, b)
				mesh.index = append(mesh.index, c)
				mesh.index = append(mesh.index, d)				
			}
		}
	}

	return &mesh
}

type Renderable struct {
	vb: *gpu.Buffer
	ib: *gpu.Buffer
	icount: i32
	bg: gpu.BindGroup
}

func createSphereRenderable(device: gpu.Device, radius: f32, w, h: int, random: f32) => Renderable {
	mesh := createSphere(radius, w, h, random)

	rb: Renderable

	bufdesc := gpu.BufferDesc{
		Size: sphereVertexStride * len(mesh.vertex),
		Usage: gpu.BufferUsage_VERTEX | gpu.BufferUsage_COPY_DST,
	}
	rb.vb = device.CreateBuffer(bufdesc)
	rb.vb.Write(0, raw(mesh.vertex))

	bufdesc.Size = 2 * len(mesh.index)
	bufdesc.Usage = gpu.BufferUsage_INDEX | gpu.BufferUsage_COPY_DST
	rb.ib = device.CreateBuffer(bufdesc)
	rb.ib.Write(0, raw(mesh.index))

	rb.icount = i32(len(mesh.index))
	return rb
}

func createBindGroup(device: gpu.Device, pipeline: gpu.RenderPipeline, mat: matrix.Mat4f, texture: gpu.Texture) => gpu.BindGroup {
	bufdesc := gpu.BufferDesc{
		Size: uniformBufferSize,
		Usage: gpu.BufferUsage_UNIFORM | gpu.BufferUsage_COPY_DST,
	}

	uniformBuffer := device.CreateBuffer(bufdesc)
	uniformBuffer.Write(0, raw([][4][4]f32{mat.M}))

	bg_desc: gpu.BindGroupDesc
	e := gpu.NewBindGroupEntry(0, gpu.NewBufferBinding(uniformBuffer))
	bg_desc.Entries = append(bg_desc.Entries, e)

	e = gpu.NewBindGroupEntry(1, sampler)
	bg_desc.Entries = append(bg_desc.Entries, e)

	e = gpu.NewBindGroupEntry(2, texture.CreateView())
	bg_desc.Entries = append(bg_desc.Entries, e)

	bg_desc.Layout = pipeline.GetBindGroupLayout(1)
	return device.CreateBindGroup(bg_desc)
}